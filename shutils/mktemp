#!/bin/sh

################################################################################
#
# mktemp
#
# 1. NOW it's mine.
# 2. NOW bc is not necessary.
# 3. random_string() is replaced so AWK replaces it.
# 4. replaced [ -n str ] || cmd and grep -q re && cmd with case statements
#
# Modified by Tpaefawzen on 2022-07-15
#
################################################################################

######################################################################
#
# MKTEMP - The "mktemp" Command also Works on Just a POSIX Environment
#
# USAGE: mktemp [--by-myself] [options] [template [...]]
#
#        --by-myself ..... (write as the 1st argument when use)
#                            Not use the "built-in" mktemp command
#                            and always do mktemp by myself but it is
#                            inferior to the built-in in performance
#        -d .............. Makes a directory instead of a file
#        -p <DIR> ........ Defines the temporary directory instead of
#                          $TMPDIR
#        -q .............. Quiet even if some error occurred
#        -u .............. Makes a file but remove it immediately
#        -t .............. Adds the temporary directory as a prefix
#                          in front of the filepath
#        --suffix=<suff> . Adds the suffix behind the filename
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-05-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [--by-myself] [options] [template [...]]
	Arg&Opts: Almost compatible with GNU mktemp
	          The following options are available and compatible with it
	            -d, -p <DIR>, -q, -u, -t, --suffix=<suff>
	          But --by-myself is the only original option, it prevent
	          from use the built-in same name command even if available
	Version : 2020-05-06 22:42:19 JST
	          (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Exec the built-in mktemp command if OK and exists ==============
by_myself=0
case "${1:-}" in 
  '--by-myself')
     shift; by_myself=1
     ;;
  *) export mydir=$(d=${0%/*}/;[ "_$d" = "_$0/" ]||cd "$d";echo "$(pwd)")
     path0=${PATH:-}
     PATH=$(printf  '%s\n' "$path0"                |
            tr      ':' '\n'                       |
            awk     '$0!=ENVIRON["mydir"]{print;}' |
            tr      '\n' ':'                       |
            grep -v '^:$'                          |
            sed     's/:$//'                       )
     CMD_builtin=$(command -v mktemp 2>/dev/null || :)
     case "$CMD_builtin" in '') by_myself=1;; esac
     PATH=$path0
     unset mydir
     ;;
esac
case $by_myself in 0) exec "$CMD_builtin" ${1+"$@"}; exit 1;; esac

# === Investigate the temporary directory if set =====================
Dir_tmp="${TMPDIR:-}"
case "$Dir_tmp" in
  '') Dir_tmp='/tmp'      ;;
  /)  Dir_tmp='/.'        ;;
  *)  Dir_tmp=${Dir_tmp%/};;
esac

# === Misc definitions ===============================================
chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
max_retry_when_failed=10
LFs=$(printf '\\\n_');LFs=${LFs%_}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
optd=0
optu=0
optq=0
optt=0
opts=''
#
# --- get them -------------------------------------------------------
optmode=''
while [ $# -gt 0 ]; do
  case $# in 0) break;; esac
  case "$optmode" in
    '') case "$1" in
          -[duqtp]*)   
	               # MAYBE TODO: implement thing such as -p<pupu>, -up<upu>, -uup <dir>, etc where <...> is dirname
		       s="${1#-}"
		       case "$s" in *[!duqtp]*) print_usage_and_exit;; esac
                       case "$s" in *d*) optd=1              ;; esac
                       case "$s" in *u*) optu=1              ;; esac
                       case "$s" in *q*) optq=1              ;; esac
                       case "$s" in *t*) optt=1              ;; esac
                       case "$s" in *p)  optmode='p'         ;; esac
                       shift; continue
                       ;;
          --directory) optd=1     ; shift; continue;;
          --dry-run)   optu=1     ; shift; continue;;
          --quiet)     optq=1     ; shift; continue;;
          --tmpdir)                 shift; continue;;
          --tmpdir=*)  optmode='p'
                       s=${1#--tmpdir=}            ;;
          --suffix=*)  optmode='s'
                       s=${1#--suffix=}            ;;
          -*)          print_usage_and_exit ;;
        esac                                         ;;
    *)  s=$1                                         ;;
  esac
  case "$optmode" in
    p) [ -d "$s" ] || error_exit 1 'Invalid path by -p,--tmpdir option'
       Dir_tmp=${s%/}; case "$Dir_tmp" in ('') Dir_tmp='/.';; esac
       optmode=''; shift; continue        ;;
    s) case "$s" in (*/*)
         error_exit 1 'Invalid suffix option'
       esac
       opts=$s
       optmode=''; shift; continue        ;;
  esac
  break
done


######################################################################
# Prepare for the Main Routine
######################################################################

# ===== FUNC: random string generator ================================
# arg   : $1=length
# ret   : 0
# stdout: generated random string
random_string () {
  # make a random hexadecimal digit
  if [ -c /dev/urandom ]; then
    dd if=/dev/urandom bs=2 count="$1" 2>/dev/null |
    od -A n -t u2 -v                               |
    awk 'BEGIN{obase='${#chrs}'}                   #
              {for(i=1;i<=NF;i++)                  #
                 print(int($i/65536*obase))        #
              }'
  else
     (ps -Ao pid,etime,pcpu,vsz; date)           |
      od -t d4 -A n -v                           |
      tr -s ' \t\n' '\n\n\n'                     |
      grep '[0-9]'                               |
      tail -n 42                                 |
      sed 's/.*\(.\{8\}\)$/\1/g'                 |
      awk 'BEGIN{a=-2147483648;}                 #
                {a+=$1;        }                 #
           END  {                                #
             srand(a);                           #
             for(i=0;i<'$1';i++){                #
               print(int(rand()*'${#chrs}'));    #
             }                                   #
           }'
  fi |
  # make a random string from the hexadecimal digit
  awk 'BEGIN  {ORS="";                         #
               s="'"$chrs"'";                  #
               for(i=0;i<length(s);i++){       #
                 c[i]=substr(s,i+1,1);         #
               }                        }      #
       /[0-9]/{print c[$0*1];           }'     |
  tail -c $1
}


######################################################################
# Main Routine
######################################################################

case $# in 0) optt=1; set -- 'tmp.XXXXXXXXXX';; esac

err=0
for arg in "$@"; do

  # --- Make dir string for printing ---------------------------------
  Dir_trg=${arg%/*}
  case "$Dir_trg" in
    "$arg") case $optt in
              0) Dir_trg=''
                 ;;
              *) Dir_trg="$Dir_tmp/"
                 case "$Dir_trg" in '/./') Dir_trg=/;; esac
                 ;;
            esac
            ;;
         *) Dir_trg="$Dir_trg/"
            ;;
  esac

  n=$max_retry_when_failed
  while [ $n -ge 0 ]; do

    # --- Making the file path ---------------------------------------
    #
    # replace the end of "XXX..." string to a random one
    Path_target=$arg
    s=$(printf '%s\n' "$Path_target" | sed 's/X*$//')
    i=$((${#Path_target}-${#s}))
    case $i in
      0) :                                    ;;
      *) Path_target="${s}$(random_string $i)";;
    esac
    #
    # add the suffix
    Path_target="${Path_target}${opts}"
    #
    # add the prefix if the option -t is enabled
    case $optt in 1) Path_target="${Dir_tmp}/${Path_target}";; esac
    #
    # normalize
    Path_target=$(printf '%s\n' "$Path_target" |
                  sed 's!//!/!g'               |
                  sed 's!/./!/!g'              )
    #
    # for security
    case "$Path_target" in
      -|/*|./*|../*) :                           ;;
                  *) Path_target="./$Path_target";;
    esac

    # --- Making the file --------------------------------------------
    case $optd in
      0) (set -C; umask 177;   : > "$Path_target") 2>/dev/null || {
           [ -f "$Path_target" ] && { n=$((n-1)); continue; }
           n=-1; break;
         }
         ;;
      1)          umask 077; mkdir "$Path_target"  2>/dev/null || {
           [ -d "$Path_target" ] && { n=$((n-1)); continue; }
           n=-1; break;
         }
         ;;
    esac

    break
  done

  # --- Print error message when failed to make a file ---------------
  case "${optq}${n}" in
    '0-1') printf '%s\n' "${0##*/}: failed on $Dir_trg${Path_target##*/}" 1>&2
           err=1
           continue
           ;;
    '1-1') err=1
           continue
           ;;
  esac

  # --- Print the path of the file -----------------------------------
  printf '%s%s\n' "$Dir_trg" "${Path_target##*/}"

  # --- Remove the file if -u,--dry-run option is set ----------------
  case $optu in 1) rm -rf "$Path_target";; esac

done


######################################################################
# Finish
######################################################################

exit $err
